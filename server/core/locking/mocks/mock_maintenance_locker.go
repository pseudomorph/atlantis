// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/core/locking (interfaces: MaintenanceLocker)

package mocks

import (
	pegomock "github.com/petergtz/pegomock"
	locking "github.com/runatlantis/atlantis/server/core/locking"
	"reflect"
	"time"
)

type MockMaintenanceLocker struct {
	fail func(message string, callerSkip ...int)
}

func NewMockMaintenanceLocker(options ...pegomock.Option) *MockMaintenanceLocker {
	mock := &MockMaintenanceLocker{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockMaintenanceLocker) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockMaintenanceLocker) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockMaintenanceLocker) CheckMaintenanceLock() (locking.MaintenanceCommandLock, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockMaintenanceLocker().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("CheckMaintenanceLock", params, []reflect.Type{reflect.TypeOf((*locking.MaintenanceCommandLock)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 locking.MaintenanceCommandLock
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(locking.MaintenanceCommandLock)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockMaintenanceLocker) LockMaintenance() (locking.MaintenanceCommandLock, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockMaintenanceLocker().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("LockMaintenance", params, []reflect.Type{reflect.TypeOf((*locking.MaintenanceCommandLock)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 locking.MaintenanceCommandLock
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(locking.MaintenanceCommandLock)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockMaintenanceLocker) UnlockMaintenance() error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockMaintenanceLocker().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("UnlockMaintenance", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockMaintenanceLocker) VerifyWasCalledOnce() *VerifierMockMaintenanceLocker {
	return &VerifierMockMaintenanceLocker{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockMaintenanceLocker) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockMaintenanceLocker {
	return &VerifierMockMaintenanceLocker{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockMaintenanceLocker) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockMaintenanceLocker {
	return &VerifierMockMaintenanceLocker{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockMaintenanceLocker) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockMaintenanceLocker {
	return &VerifierMockMaintenanceLocker{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockMaintenanceLocker struct {
	mock                   *MockMaintenanceLocker
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockMaintenanceLocker) CheckMaintenanceLock() *MockMaintenanceLocker_CheckMaintenanceLock_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "CheckMaintenanceLock", params, verifier.timeout)
	return &MockMaintenanceLocker_CheckMaintenanceLock_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockMaintenanceLocker_CheckMaintenanceLock_OngoingVerification struct {
	mock              *MockMaintenanceLocker
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockMaintenanceLocker_CheckMaintenanceLock_OngoingVerification) GetCapturedArguments() {
}

func (c *MockMaintenanceLocker_CheckMaintenanceLock_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierMockMaintenanceLocker) LockMaintenance() *MockMaintenanceLocker_LockMaintenance_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "LockMaintenance", params, verifier.timeout)
	return &MockMaintenanceLocker_LockMaintenance_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockMaintenanceLocker_LockMaintenance_OngoingVerification struct {
	mock              *MockMaintenanceLocker
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockMaintenanceLocker_LockMaintenance_OngoingVerification) GetCapturedArguments() {
}

func (c *MockMaintenanceLocker_LockMaintenance_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierMockMaintenanceLocker) UnlockMaintenance() *MockMaintenanceLocker_UnlockMaintenance_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "UnlockMaintenance", params, verifier.timeout)
	return &MockMaintenanceLocker_UnlockMaintenance_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockMaintenanceLocker_UnlockMaintenance_OngoingVerification struct {
	mock              *MockMaintenanceLocker
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockMaintenanceLocker_UnlockMaintenance_OngoingVerification) GetCapturedArguments() {
}

func (c *MockMaintenanceLocker_UnlockMaintenance_OngoingVerification) GetAllCapturedArguments() {
}
